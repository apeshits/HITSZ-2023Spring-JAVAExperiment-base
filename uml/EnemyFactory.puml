@startuml


interface EnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

class MobEnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

class EliteEnemyFactory
{
    + createEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp): AbstractAircraft
}

EnemyFactory <|.. MobEnemyFactory
EnemyFactory <|.. EliteEnemyFactory

MobEnemyFactory ..> MobEnemy
EliteEnemyFactory ..> EliteEnemy


abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<BaseBullet>
    + {abstract} drop():AbstractProp
 }

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy{
    - shootNum:int
    - power:int
    - direction:int
    - randNum:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + drop():AbstractProp
}
AbstractAircraft <|-- EliteEnemy
AbstractFlyingObject <|-- AbstractAircraft

@enduml